🔍 Definition

A SQL JOIN is used to combine rows from two or more tables based on a common column between them.
It retrieves data that is related logically between multiple tables.

🧩 Basic Syntax
SELECT columns_from_both_tables
FROM table1
JOIN table2
ON table1.column1 = table2.column2;


Explanation:

table1 and table2 → Tables you want to join

column1 and column2 → Common columns between the two tables

The ON keyword specifies the matching condition

Example 1 — Join Two Tables Based on a Common Column

Tables:

Customers Table
customer_id	first_name
1	John
2	Mary
3	Bob
Orders Table
order_id	customer	item	amount
101	1	Laptop	1200
102	2	Phone	700
103	3	Tablet	900
Query
SELECT Customers.customer_id, Customers.first_name, Orders.item
FROM Customers
JOIN Orders
ON Customers.customer_id = Orders.customer;


✅ Explanation:
This joins the Customers and Orders tables using the customer_id column.

🧾 Result:

customer_id	first_name	item
1	John	Laptop
2	Mary	Phone
3	Bob	Tablet
Example 2 — Join With WHERE Clause
SELECT Customers.customer_id, Customers.first_name, Orders.amount
FROM Customers
JOIN Orders
ON Customers.customer_id = Orders.customer
WHERE Orders.amount >= 800;


✅ Explanation:
This returns only those customers whose order amount ≥ 800.

🧾 Result:

customer_id	first_name	amount
1	John	1200
3	Bob	900
JOIN Multiple Tables

You can join three or more tables by chaining JOIN operations.

Example 3 — Joining Three Tables

Let’s add a Shippings table.

shipping_id	customer	status
1	1	Delivered
2	2	Pending
3	3	Shipped
SELECT Customers.first_name, Orders.item, Shippings.status
FROM Customers
JOIN Orders ON Customers.customer_id = Orders.customer
JOIN Shippings ON Customers.customer_id = Shippings.customer;


🧾 Result:

first_name	item	status
John	Laptop	Delivered
Mary	Phone	Pending
Bob	Tablet	Shipped

✅ Explanation:
This joins three tables based on matching customer_id (or customer) fields and retrieves columns from all of them.

🧱 Types of SQL JOINs
Type	Description
INNER JOIN	Returns only rows with matching values in both tables
LEFT JOIN	Returns all rows from the left table, and matching rows from the right table (NULL where no match)
RIGHT JOIN	Returns all rows from the right table, and matching rows from the left table
FULL OUTER JOIN	Returns all rows from both tables (NULL where no match on either side)
Example 4 — INNER JOIN
SELECT Customers.first_name, Orders.item
FROM Customers
INNER JOIN Orders
ON Customers.customer_id = Orders.customer;


🧾 Result: Only customers who have placed orders.

Example 5 — LEFT JOIN
SELECT Customers.first_name, Orders.item
FROM Customers
LEFT JOIN Orders
ON Customers.customer_id = Orders.customer;


🧾 Result: All customers are shown, even if they have no orders (those will show NULL for item).

Example 6 — RIGHT JOIN
SELECT Customers.first_name, Orders.item
FROM Customers
RIGHT JOIN Orders
ON Customers.customer_id = Orders.customer;


🧾 Result: All orders are shown, even if no matching customer record exists.

Example 7 — FULL OUTER JOIN

(Some databases like MySQL need UNION instead)

SELECT Customers.first_name, Orders.item
FROM Customers
LEFT JOIN Orders ON Customers.customer_id = Orders.customer
UNION
SELECT Customers.first_name, Orders.item
FROM Customers
RIGHT JOIN Orders ON Customers.customer_id = Orders.customer;


🧾 Result: Returns all customers and all orders — matched or unmatched.

SQL SELF JOIN

A Self Join joins a table to itself — useful for comparing rows within the same table.

Example 8 — Self Join
SELECT
    C1.first_name AS FirstPerson,
    C2.first_name AS SecondPerson,
    C1.country
FROM Customers C1, Customers C2
WHERE C1.country = C2.country
AND C1.first_name != C2.first_name;


✅ Explanation:
This finds pairs of customers from the same country, but with different names.

🧾 Result:

FirstPerson	SecondPerson	country
John	Mary	USA
Mary	John	USA
SQL JOIN With Table Aliases

You can simplify your queries using AS aliases.

Example 9 — Table Alias
SELECT C.customer_id, C.first_name, O.amount
FROM Customers AS C
JOIN Orders AS O
ON C.customer_id = O.customer;


✅ Explanation:
Aliases (C and O) make the query shorter and more readable.

SQL JOIN With Column Aliases

You can also rename column headers temporarily in the result set.

Example 10 — Column Alias
SELECT 
  C.customer_id AS cid, 
  C.first_name AS name, 
  O.amount AS total_amount
FROM Customers AS C
JOIN Orders AS O
ON C.customer_id = O.customer;


🧾 Result:

cid	name	total_amount
1	John	1200
2	Mary	700
3	Bob	900
JOIN With WHERE Clause (Filtering Results)
Example 11 — JOIN + WHERE
SELECT C.customer_id, C.first_name, O.amount
FROM Customers AS C
JOIN Orders AS O
ON C.customer_id = O.customer
WHERE O.amount >= 500;


✅ Explanation:
Returns customers with order amount ≥ 500 after joining.

✅ Summary Table
Join Type	Returns
INNER JOIN	Only matching rows
LEFT JOIN	All left + matching right rows
RIGHT JOIN	All right + matching left rows
FULL OUTER JOIN	All rows from both tables
SELF JOIN	Table joined to itself
JOIN with Alias	Simplifies table/column references
JOIN with WHERE	Adds conditional filtering
